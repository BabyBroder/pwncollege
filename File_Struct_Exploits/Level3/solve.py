#!/usr/bin/env python3
from pwn import *
import sys
import os
import socks
import socket
# Cre: Broder
_libc = "./libc.so.6"
_ld = "./ld-linux-x86-64.so.2"

HOST = 'localhost'
port = 1337
_arch = 64

user = os.getenv('USER')
if user == 'broder':
    binary = "./babyfile_level3_patched"
else:
    binary = "/challenge/babyfile_level3"

context.log_level = 'debug'
context.binary = elf = ELF(binary, checksec=False)

if user == 'broder':
    libc = ELF(_libc, checksec=False)
    _ld = ELF(_ld, checksec=False)
else:
    libc = elf.libc

environ = {
    'LD_PRELOAD': os.path.join(os.getcwd(), './libc.so.6'),
    'LD_LIBRARY_PATH': os.path.join(os.getcwd(), './')
}

gs = f"""
set solib-search-path {os.getcwd()}
breakrva ?
b *main
"""

info        = lambda msg: log.info(msg)
success     = lambda msg: log.success(msg)
error       = lambda msg: log.error(msg)
sla         = lambda msg, data: io.sendlineafter(msg, data)
sa          = lambda msg, data: io.sendafter(msg, data)
sl          = lambda data: io.sendline(data)
s           = lambda data: io.send(data)
rcu         = lambda data: io.recvuntil(data)

def p(_data):
    if(_arch == 64):
        return p64(_data, endian = 'little')
    return p32(_data, endian = 'little')

def stop():
    if args.GDB:
        pause()

def start():
    if args.GDB:
        if args.VSCODE:
            context.terminal = ["/home/broder/.vscode-terminal"]
        return gdb.debug(elf.path, gdbscript=gs)
        # return gdb.debug(elf.path, env=environ, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, port)
    else:
        return process(elf.path)
        # return process(elf.path, env=environ)

io = start()
rcu(b'Now reading from stdin directly to the FILE struct.\n\n')
s(b'\x01')

io.interactive()
